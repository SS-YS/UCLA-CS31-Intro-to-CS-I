1. 

a. 
int main()
{
    int arr[3] = { 5, 10, 15 };
    int* ptr = arr;

    *ptr = 10;          // set arr[0] to 10
    ptr += 1;
    *ptr = 20;      // set arr[1] to 20
    ptr += 1;
    *ptr = 30;        // set arr[2] to 30

    while (ptr >= arr)
    {
        cout << *ptr << endl;    // print values
        ptr--;
    }
}

b. 
The function doesnâ€™t work because the pointer is passed by value. The pointer pToMax is just a copy of ptr, and therefore modifying pToMax  will not change ptr. This problem can be fixed by making the pointer to be passed by reference. 

void findMax(int arr[], int n, int*& pToMax)
{
    if (n <= 0)
        return;      // no items, no maximum!

    pToMax = arr;

    for (int i = 1; i < n; i++)
    {
        cout << arr[i] << " " << *pToMax;
        cout << endl;
        if (arr[i] > *pToMax)
             pToMax = arr + i;
    }
}

c. 
The problem is that the pointer ptr is not initialized. So, in computeCube(), assigning the value n*n*n to the variable that ptr points to may not work. This can be fixed by initializing ptr to point to a variable.

int main()
{
    int a;
    int* ptr = &a;
    computeCube(5, ptr);
    cout << "Five cubed is " << *ptr << endl;
}

d. 
The problem is that str1 and str2 are just pointers that point to each character in the array. To get the actual characters that we want to compare, we should use *str1 and *str2. 

// return true if two C strings are equal
bool strequal(const char str1[], const char str2[])
{
  while (*str1 != 0 && *str2 != 0)
  {
      if (*str1 != *str2)  // compare corresponding characters
          return false;
      str1++;            // advance to the next character
      str2++;
  }
  return *str1 == *str2;   // both ended at same time?
}

e. 
Since the array anArray is defined inside the function getPtrToArray(), it is only available in that function and will be discarded once the function is over. So, when the main function tries to output ptr[i], some random values will be printed. 

2.

a. 
double* cat;
b. 
double mouse[5];
c. 
cat = mouse + 4;  
d. 
*cat = 25;
e. 
*(mouse + 3) = 54; 
f. 
cat -= 3;
g. 
cat[1] = 42;
h. 
cat[0] = 27;
i. 
bool b = *cat == *(cat+1); 
j. 
bool d = cat == mouse; 

3.
 
a.
double mean(const double* scores, int numScores)
{
    const double* ptr = scores;
    double tot = 0;
    for (int i = 0; i < numScores; i++)
    {
        tot += *(ptr + i);
    }
    return tot/numScores;
}

b.
const char* findTheChar(const char* str, char chr)
{
    for (int k = 0; *(str + k) != 0; k++)
    {
        if (*(str + k) == chr)
            return str + k;
    }
    return nullptr;
}

c.
const char* findTheChar(const char* str, char chr)
{
    while (*str != 0)
    {
        if (*str == chr)
            return str;
        str++;
    }
    return nullptr;
}

4. 

In the main function, array is initialized to be { 5, 3, 4, 17, 22, 19 }. 
A pointer ptr is initialized to be maxwell(array, &array[2]), which is a pointer that points to array[0] because maxwell() takes in two pointers and return the one that points to a bigger value.  
Then, *ptr, which is array[0], is set to -1. The array is now { -1, 3, 4, 17, 22, 19 }. 
Then, ptr += 2. It now points to array[2]. 
Then, ptr[1], which is array[2+1], is set to 9. The array is now { -1, 3, 4, 9, 22, 19 }.
Then, *(array+1), which is array[1], is set to 79. The array is now { -1, 79, 4, 9, 22, 19 }.
Now, the program prints &array[5] - ptr. Since ptr points to array[2], this value is 3. 
Next, swap1(&array[0], &array[1]) is called but it only swaps the copies of the two addresses so no change is made. 
Next, swap2(array, &array[2]) is called, which swaps array[0] and array[2]. The array is now { 4, 79, -1, 9, 22, 19 }.
Finally, each element of the array is printed, one per line. 

Therefore, the program prints:
3
4
79
-1
9
22
19

5.

void removeS(char* ptr)
{
    char* res = ptr;
    while (*ptr != 0)
    {
        if (*ptr != 'S' && *ptr != 's')
        {
            *res = *ptr;
            res++;
        }
        ptr++;
    }
    *res = 0;
}
